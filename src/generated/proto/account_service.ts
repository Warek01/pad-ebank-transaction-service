// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.20.3
// source: account_service.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Currency, ServiceError } from './shared';

export const protobufPackage = 'account_service';

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface AuthCredentials {
  email: string;
  fullName: string;
}

export interface AuthResult {
  credentials?: AuthCredentials | null;
  error?: ServiceError | null;
}

export interface RegisterCredentials {
  email: string;
  password: string;
  fullName: string;
}

export interface GetProfileOptions {
  email: string;
}

export interface Profile {
  email: string;
  fullName: string;
}

export interface GetProfileResult {
  profile?: Profile | null;
  error?: ServiceError | null;
}

export interface AddCurrencyOptions {
  currency: Currency;
  amount: number;
  cardCode: string;
}

export interface AddCurrencyResult {
  error?: ServiceError | null;
}

export interface TransactionData {
  currency: Currency;
  amount: number;
  cardCode: string;
}

export interface CanPerformTransactionResult {
  canPerform?: boolean | null;
  error?: ServiceError | null;
}

export interface ChangeCurrencyOptions {
  currency: Currency;
  cardCode: string;
}

export interface ChangeCurrencyResult {
  error?: ServiceError | null;
}

export interface CardIdentifier {
  cardCode: string;
}

export interface BlockCardResult {
  error?: ServiceError | null;
}

export interface UnblockCardResult {
  error?: ServiceError | null;
}

export const ACCOUNT_SERVICE_PACKAGE_NAME = 'account_service';

export interface AccountServiceClient {
  login(request: LoginCredentials, metadata?: Metadata): Observable<AuthResult>;

  register(
    request: RegisterCredentials,
    metadata?: Metadata,
  ): Observable<AuthResult>;

  getProfile(
    request: GetProfileOptions,
    metadata?: Metadata,
  ): Observable<GetProfileResult>;

  addCurrency(
    request: AddCurrencyOptions,
    metadata?: Metadata,
  ): Observable<AddCurrencyResult>;

  canPerformTransaction(
    request: TransactionData,
    metadata?: Metadata,
  ): Observable<CanPerformTransactionResult>;

  changeCurrency(
    request: ChangeCurrencyOptions,
    metadata?: Metadata,
  ): Observable<ChangeCurrencyResult>;

  blockCard(
    request: CardIdentifier,
    metadata?: Metadata,
  ): Observable<BlockCardResult>;

  unblockCard(
    request: CardIdentifier,
    metadata?: Metadata,
  ): Observable<UnblockCardResult>;
}

export interface AccountServiceController {
  login(
    request: LoginCredentials,
    metadata?: Metadata,
  ): Promise<AuthResult> | Observable<AuthResult> | AuthResult;

  register(
    request: RegisterCredentials,
    metadata?: Metadata,
  ): Promise<AuthResult> | Observable<AuthResult> | AuthResult;

  getProfile(
    request: GetProfileOptions,
    metadata?: Metadata,
  ):
    | Promise<GetProfileResult>
    | Observable<GetProfileResult>
    | GetProfileResult;

  addCurrency(
    request: AddCurrencyOptions,
    metadata?: Metadata,
  ):
    | Promise<AddCurrencyResult>
    | Observable<AddCurrencyResult>
    | AddCurrencyResult;

  canPerformTransaction(
    request: TransactionData,
    metadata?: Metadata,
  ):
    | Promise<CanPerformTransactionResult>
    | Observable<CanPerformTransactionResult>
    | CanPerformTransactionResult;

  changeCurrency(
    request: ChangeCurrencyOptions,
    metadata?: Metadata,
  ):
    | Promise<ChangeCurrencyResult>
    | Observable<ChangeCurrencyResult>
    | ChangeCurrencyResult;

  blockCard(
    request: CardIdentifier,
    metadata?: Metadata,
  ): Promise<BlockCardResult> | Observable<BlockCardResult> | BlockCardResult;

  unblockCard(
    request: CardIdentifier,
    metadata?: Metadata,
  ):
    | Promise<UnblockCardResult>
    | Observable<UnblockCardResult>
    | UnblockCardResult;
}

export function AccountServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'login',
      'register',
      'getProfile',
      'addCurrency',
      'canPerformTransaction',
      'changeCurrency',
      'blockCard',
      'unblockCard',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AccountService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AccountService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const ACCOUNT_SERVICE_NAME = 'AccountService';
