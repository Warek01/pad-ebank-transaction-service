// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.20.3
// source: account_service.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { ProtoServiceError } from './shared';

export const protobufPackage = 'account_service';

export interface ProtoLoginCredentials {
  email: string;
  password: string;
}

export interface ProtoAuthCredentials {
  email: string;
  fullName: string;
}

export interface ProtoAuthResult {
  credentials?: ProtoAuthCredentials | null;
  error?: ProtoServiceError | null;
}

export interface ProtoRegisterCredentials {
  email: string;
  password: string;
  fullName: string;
  createdAt: number;
}

export interface ProtoGetProfileOptions {
  email: string;
}

export interface ProtoProfile {
  email: string;
  fullName: string;
  createdAt: number;
}

export interface ProtoGetProfileResult {
  profile?: ProtoProfile | null;
  error?: ProtoServiceError | null;
}

export interface ProtoAddCurrencyOptions {
  currency: string;
  amount: number;
  cardCode: string;
}

export interface ProtoAddCurrencyResult {
  error?: ProtoServiceError | null;
}

export interface ProtoTransactionData {
  currency: string;
  amount: number;
  cardCode: string;
}

export interface ProtoCanPerformTransactionResult {
  canPerform?: boolean | null;
  error?: ProtoServiceError | null;
}

export interface ProtoChangeCurrencyOptions {
  currency: string;
  cardCode: string;
}

export interface ProtoChangeCurrencyResult {
  error?: ProtoServiceError | null;
}

export interface ProtoCardIdentifier {
  cardCode: string;
}

export interface ProtoBlockCardResult {
  error?: ProtoServiceError | null;
}

export interface ProtoUnblockCardResult {
  error?: ProtoServiceError | null;
}

export const ACCOUNT_SERVICE_PACKAGE_NAME = 'account_service';

export interface AccountServiceClient {
  login(
    request: ProtoLoginCredentials,
    metadata?: Metadata,
  ): Observable<ProtoAuthResult>;

  register(
    request: ProtoRegisterCredentials,
    metadata?: Metadata,
  ): Observable<ProtoAuthResult>;

  getProfile(
    request: ProtoGetProfileOptions,
    metadata?: Metadata,
  ): Observable<ProtoGetProfileResult>;

  addCurrency(
    request: ProtoAddCurrencyOptions,
    metadata?: Metadata,
  ): Observable<ProtoAddCurrencyResult>;

  canPerformTransaction(
    request: ProtoTransactionData,
    metadata?: Metadata,
  ): Observable<ProtoCanPerformTransactionResult>;

  changeCurrency(
    request: ProtoChangeCurrencyOptions,
    metadata?: Metadata,
  ): Observable<ProtoChangeCurrencyResult>;

  blockCard(
    request: ProtoCardIdentifier,
    metadata?: Metadata,
  ): Observable<ProtoBlockCardResult>;

  unblockCard(
    request: ProtoCardIdentifier,
    metadata?: Metadata,
  ): Observable<ProtoUnblockCardResult>;
}

export interface AccountServiceController {
  login(
    request: ProtoLoginCredentials,
    metadata?: Metadata,
  ): Promise<ProtoAuthResult> | Observable<ProtoAuthResult> | ProtoAuthResult;

  register(
    request: ProtoRegisterCredentials,
    metadata?: Metadata,
  ): Promise<ProtoAuthResult> | Observable<ProtoAuthResult> | ProtoAuthResult;

  getProfile(
    request: ProtoGetProfileOptions,
    metadata?: Metadata,
  ):
    | Promise<ProtoGetProfileResult>
    | Observable<ProtoGetProfileResult>
    | ProtoGetProfileResult;

  addCurrency(
    request: ProtoAddCurrencyOptions,
    metadata?: Metadata,
  ):
    | Promise<ProtoAddCurrencyResult>
    | Observable<ProtoAddCurrencyResult>
    | ProtoAddCurrencyResult;

  canPerformTransaction(
    request: ProtoTransactionData,
    metadata?: Metadata,
  ):
    | Promise<ProtoCanPerformTransactionResult>
    | Observable<ProtoCanPerformTransactionResult>
    | ProtoCanPerformTransactionResult;

  changeCurrency(
    request: ProtoChangeCurrencyOptions,
    metadata?: Metadata,
  ):
    | Promise<ProtoChangeCurrencyResult>
    | Observable<ProtoChangeCurrencyResult>
    | ProtoChangeCurrencyResult;

  blockCard(
    request: ProtoCardIdentifier,
    metadata?: Metadata,
  ):
    | Promise<ProtoBlockCardResult>
    | Observable<ProtoBlockCardResult>
    | ProtoBlockCardResult;

  unblockCard(
    request: ProtoCardIdentifier,
    metadata?: Metadata,
  ):
    | Promise<ProtoUnblockCardResult>
    | Observable<ProtoUnblockCardResult>
    | ProtoUnblockCardResult;
}

export function AccountServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'login',
      'register',
      'getProfile',
      'addCurrency',
      'canPerformTransaction',
      'changeCurrency',
      'blockCard',
      'unblockCard',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AccountService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AccountService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const ACCOUNT_SERVICE_NAME = 'AccountService';
