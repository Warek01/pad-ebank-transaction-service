// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.12.4
// source: transaction_service.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Currency, ServiceError } from './shared';

export const protobufPackage = 'transaction_service';

export enum TransactionType {
  DEPOSIT = 0,
  WITHDRAW = 1,
  TRANSFER = 2,
}

export interface TransferData {
  currency: Currency;
  amount: number;
  srcCardCode: string;
  dstCardCode: string;
}

export interface TransferResult {
  error?: ServiceError | null;
}

export interface DepositData {
  currency: Currency;
  amount: number;
  cardCode: string;
}

export interface DepositResult {
  error?: ServiceError | null;
}

export interface WithdrawData {
  currency: Currency;
  amount: number;
  cardCode: string;
}

export interface WithdrawResult {
  error?: ServiceError | null;
}

export interface GetHistoryOptions {
  cardCode: string;
  month: number;
  year: number;
}

export interface Transaction {
  transactionId: string;
  type: TransactionType;
  srcCardCode: string;
  dstCardCode: string;
  amount: number;
  date: string;
}

export interface TransactionsHistory {
  transactions: Transaction[];
  error?: ServiceError | null;
}

export interface CancelTransactionOptions {
  transactionId: string;
}

export interface CancelTransactionResult {
  error?: ServiceError | null;
}

export const TRANSACTION_SERVICE_PACKAGE_NAME = 'transaction_service';

export interface TransactionServiceClient {
  transferCurrency(
    request: TransferData,
    metadata?: Metadata,
  ): Observable<TransferResult>;

  depositCurrency(
    request: DepositData,
    metadata?: Metadata,
  ): Observable<DepositResult>;

  withdrawCurrency(
    request: WithdrawData,
    metadata?: Metadata,
  ): Observable<WithdrawResult>;

  getHistory(
    request: GetHistoryOptions,
    metadata?: Metadata,
  ): Observable<TransactionsHistory>;

  cancelTransaction(
    request: CancelTransactionOptions,
    metadata?: Metadata,
  ): Observable<CancelTransactionResult>;
}

export interface TransactionServiceController {
  transferCurrency(
    request: TransferData,
    metadata?: Metadata,
  ): Promise<TransferResult> | Observable<TransferResult> | TransferResult;

  depositCurrency(
    request: DepositData,
    metadata?: Metadata,
  ): Promise<DepositResult> | Observable<DepositResult> | DepositResult;

  withdrawCurrency(
    request: WithdrawData,
    metadata?: Metadata,
  ): Promise<WithdrawResult> | Observable<WithdrawResult> | WithdrawResult;

  getHistory(
    request: GetHistoryOptions,
    metadata?: Metadata,
  ):
    | Promise<TransactionsHistory>
    | Observable<TransactionsHistory>
    | TransactionsHistory;

  cancelTransaction(
    request: CancelTransactionOptions,
    metadata?: Metadata,
  ):
    | Promise<CancelTransactionResult>
    | Observable<CancelTransactionResult>
    | CancelTransactionResult;
}

export function TransactionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'transferCurrency',
      'depositCurrency',
      'withdrawCurrency',
      'getHistory',
      'cancelTransaction',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('TransactionService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('TransactionService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const TRANSACTION_SERVICE_NAME = 'TransactionService';
