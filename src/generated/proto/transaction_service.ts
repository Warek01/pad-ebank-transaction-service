// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.20.3
// source: transaction_service.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { ProtoServiceError } from './shared';

export const protobufPackage = 'transaction_service';

export interface ProtoCreateTransactionData {
  type: string;
  transferData?: ProtoTransferData | null;
  depositData?: ProtoDepositData | null;
  withdrawData?: ProtoWithdrawData | null;
}

export interface ProtoCreateTransactionResult {
  error?: ProtoServiceError | null;
}

export interface ProtoTransferData {
  currency: string;
  amount: number;
  srcCardCode: string;
  dstCardCode: string;
}

export interface ProtoDepositData {
  currency: string;
  amount: number;
  cardCode: string;
}

export interface ProtoWithdrawData {
  currency: string;
  amount: number;
  cardCode: string;
}

export interface ProtoGetHistoryOptions {
  cardCode: string;
  month: number;
  year: number;
}

export interface ProtoTransaction {
  transactionId: string;
  type: string;
  srcCardCode: string;
  dstCardCode: string;
  amount: number;
  date: string;
}

export interface ProtoTransactionsHistory {
  transactions: ProtoTransaction[];
  error?: ProtoServiceError | null;
}

export const TRANSACTION_SERVICE_PACKAGE_NAME = 'transaction_service';

export interface TransactionServiceClient {
  createTransaction(
    request: ProtoCreateTransactionData,
    metadata?: Metadata,
  ): Observable<ProtoCreateTransactionResult>;

  getHistory(
    request: ProtoGetHistoryOptions,
    metadata?: Metadata,
  ): Observable<ProtoTransactionsHistory>;
}

export interface TransactionServiceController {
  createTransaction(
    request: ProtoCreateTransactionData,
    metadata?: Metadata,
  ):
    | Promise<ProtoCreateTransactionResult>
    | Observable<ProtoCreateTransactionResult>
    | ProtoCreateTransactionResult;

  getHistory(
    request: ProtoGetHistoryOptions,
    metadata?: Metadata,
  ):
    | Promise<ProtoTransactionsHistory>
    | Observable<ProtoTransactionsHistory>
    | ProtoTransactionsHistory;
}

export function TransactionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['createTransaction', 'getHistory'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('TransactionService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('TransactionService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const TRANSACTION_SERVICE_NAME = 'TransactionService';
