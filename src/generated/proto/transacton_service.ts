// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.12.4
// source: transacton_service.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Currency } from "./currency";

export const protobufPackage = "transaction_service";

export enum TransactionType {
  DEPOSIT = 0,
  WITHDRAW = 1,
  TRANSFER = 2,
  UNRECOGNIZED = -1,
}

export interface TransferData {
  currency: Currency;
  amount: number;
  sourceCardCode: string;
  targetCardCode: string;
}

export interface TransferResult {
  success: boolean;
}

export interface DepositData {
  currency: Currency;
  amount: number;
  cardCode: string;
}

export interface DepositResult {
  success: boolean;
}

export interface WithdrawData {
  currency: Currency;
  amount: number;
  cardCode: string;
}

export interface WithdrawResult {
  success: boolean;
}

export interface GetHistoryOptions {
  cardCode: string;
  month: number;
  year: number;
}

export interface Transaction {
  transactionId: number;
  type: TransactionType;
  sourceCardCode: string;
  targetCardCode: string;
  amount: number;
  unixTimestamp: number;
}

export interface TransactionsHistory {
  transactions: Transaction[];
}

export interface CancelTransactionOptions {
  transactionId: number;
}

export interface CancelTransactionResult {
  success: boolean;
}

export const TRANSACTION_SERVICE_PACKAGE_NAME = "transaction_service";

export interface TransactionServiceClient {
  transferCurrency(request: TransferData, metadata?: Metadata): Observable<TransferResult>;

  depositCurrency(request: DepositData, metadata?: Metadata): Observable<DepositResult>;

  withdrawCurrency(request: WithdrawData, metadata?: Metadata): Observable<WithdrawResult>;

  getHistory(request: GetHistoryOptions, metadata?: Metadata): Observable<TransactionsHistory>;

  cancelTransaction(request: CancelTransactionOptions, metadata?: Metadata): Observable<CancelTransactionResult>;
}

export interface TransactionServiceController {
  transferCurrency(
    request: TransferData,
    metadata?: Metadata,
  ): Promise<TransferResult> | Observable<TransferResult> | TransferResult;

  depositCurrency(
    request: DepositData,
    metadata?: Metadata,
  ): Promise<DepositResult> | Observable<DepositResult> | DepositResult;

  withdrawCurrency(
    request: WithdrawData,
    metadata?: Metadata,
  ): Promise<WithdrawResult> | Observable<WithdrawResult> | WithdrawResult;

  getHistory(
    request: GetHistoryOptions,
    metadata?: Metadata,
  ): Promise<TransactionsHistory> | Observable<TransactionsHistory> | TransactionsHistory;

  cancelTransaction(
    request: CancelTransactionOptions,
    metadata?: Metadata,
  ): Promise<CancelTransactionResult> | Observable<CancelTransactionResult> | CancelTransactionResult;
}

export function TransactionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "transferCurrency",
      "depositCurrency",
      "withdrawCurrency",
      "getHistory",
      "cancelTransaction",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TransactionService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TransactionService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TRANSACTION_SERVICE_NAME = "TransactionService";
